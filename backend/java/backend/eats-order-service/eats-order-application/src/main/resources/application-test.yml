server:
  port: 8074

spring:
  application:
    name: eats-order-application

    autoconfigure:
      exclude:
        - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
        - org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration
        - com.querydsl.sql.spring.autoconfigure.QuerydslSqlAutoConfiguration

  jpa:
    hibernate.ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  database-platform: org.hibernate.spatial.dialect.postgis.PostgisDialect

  datasource:
    # currentSchema: call
    # binaryTransfer
    # reWriteBatchedInserts: batch optimization
    #TODO CQRS possible with replica DB? access conflict with user micro service?
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=order&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: admin
    driver-class-name: org.postgresql.Driver
    hikari:
      data-source-properties:
        stringtype: unspecified

  sql:
    init:
      platform: postgres
      schema-locations: classpath:sql/orders/init-schema.sql
      data-locations: classpath:sql/orders/init-data.sql
      mode: always



retry-config:
  initial-interval-ms: 1000
  max-interval-ms: 10000
  multiplier: 2.0
  maxAttempts: 3
  sleep-time-ms: 2000

#management:
#  endpoints:
#    web:
#      exposure:
#        include: "*" # health, info, ...
#  health:
#    readiness-state:
#      enabled: true
#    liveness-state:
#      enabled: true
#  endpoint:
#    shutdown:
#      enabled: true
#    heath:
#      probes:
#        enabled: true
#  info:
#    env:
#      enabled: true
#  metrics:
#    tags:
#      application: ${spring.application.name}
#
#eureka:
#  instance:
#    preferIpAddress: true
#  client:
#    fetchRegistry: true
#    registerWithEureka: true
#    serviceUrl:
#      defaultZone: http://localhost:8761/eureka/

topic-names:
  payment-request-topic-name: payment-request
  payment-response-topic-name: payment-response
  restaurant-approval-request-topic-name: restaurant-approval-request
  restaurant-approval-response-topic-name: restaurant-approval-response

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  topic-names-to-create:
    - payment-response
    - payment-request
    - restaurant-approval-request
    - restaurant-approval-response
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: false
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150
  enable-auto-commit: true

kafka-consumer-group-id:
  payment-consumer-group-id: payment-topic-consumer-group-id
  driver-approval-consumer-group-id: driver-approval-topic-consumer-group-id

logging:
  level:
    org.springframework.jdbc: DEBUG
    com.querydsl.sql: DEBUG
    org.hibernate.SQL: debug
