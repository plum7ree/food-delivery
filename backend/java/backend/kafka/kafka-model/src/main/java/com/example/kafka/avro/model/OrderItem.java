/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.example.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -2463395263566179779L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderItem\",\"namespace\":\"com.example.kafka.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
        MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
    }

    private static final BinaryMessageEncoder<OrderItem> ENCODER =
        new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<OrderItem> DECODER =
        new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<OrderItem> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<OrderItem> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<OrderItem> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this OrderItem to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a OrderItem from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a OrderItem instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static OrderItem fromByteBuffer(
        java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.util.UUID id;
    private int quantity;
    private java.nio.ByteBuffer price;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public OrderItem() {
    }

    /**
     * All-args constructor.
     * @param id The new value for id
     * @param quantity The new value for quantity
     * @param price The new value for price
     */
    public OrderItem(java.util.UUID id, java.lang.Integer quantity, java.nio.ByteBuffer price) {
        this.id = id;
        this.quantity = quantity;
        this.price = price;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return quantity;
            case 2:
                return price;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions =
        new org.apache.avro.Conversion<?>[]{
            new org.apache.avro.Conversions.UUIDConversion(),
            null,
            null,
            null
        };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                id = (java.util.UUID) value$;
                break;
            case 1:
                quantity = (java.lang.Integer) value$;
                break;
            case 2:
                price = (java.nio.ByteBuffer) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public java.util.UUID getId() {
        return id;
    }


    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(java.util.UUID value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'quantity' field.
     * @return The value of the 'quantity' field.
     */
    public int getQuantity() {
        return quantity;
    }


    /**
     * Sets the value of the 'quantity' field.
     * @param value the value to set.
     */
    public void setQuantity(int value) {
        this.quantity = value;
    }

    /**
     * Gets the value of the 'price' field.
     * @return The value of the 'price' field.
     */
    public java.nio.ByteBuffer getPrice() {
        return price;
    }


    /**
     * Sets the value of the 'price' field.
     * @param value the value to set.
     */
    public void setPrice(java.nio.ByteBuffer value) {
        this.price = value;
    }

    /**
     * Creates a new OrderItem RecordBuilder.
     * @return A new OrderItem RecordBuilder
     */
    public static com.example.kafka.avro.model.OrderItem.Builder newBuilder() {
        return new com.example.kafka.avro.model.OrderItem.Builder();
    }

    /**
     * Creates a new OrderItem RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new OrderItem RecordBuilder
     */
    public static com.example.kafka.avro.model.OrderItem.Builder newBuilder(com.example.kafka.avro.model.OrderItem.Builder other) {
        if (other == null) {
            return new com.example.kafka.avro.model.OrderItem.Builder();
        } else {
            return new com.example.kafka.avro.model.OrderItem.Builder(other);
        }
    }

    /**
     * Creates a new OrderItem RecordBuilder by copying an existing OrderItem instance.
     * @param other The existing instance to copy.
     * @return A new OrderItem RecordBuilder
     */
    public static com.example.kafka.avro.model.OrderItem.Builder newBuilder(com.example.kafka.avro.model.OrderItem other) {
        if (other == null) {
            return new com.example.kafka.avro.model.OrderItem.Builder();
        } else {
            return new com.example.kafka.avro.model.OrderItem.Builder(other);
        }
    }

    /**
     * RecordBuilder for OrderItem instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderItem>
        implements org.apache.avro.data.RecordBuilder<OrderItem> {

        private java.util.UUID id;
        private int quantity;
        private java.nio.ByteBuffer price;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.example.kafka.avro.model.OrderItem.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.quantity)) {
                this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.price)) {
                this.price = data().deepCopy(fields()[2].schema(), other.price);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
        }

        /**
         * Creates a Builder by copying an existing OrderItem instance
         * @param other The existing instance to copy.
         */
        private Builder(com.example.kafka.avro.model.OrderItem other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.quantity)) {
                this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.price)) {
                this.price = data().deepCopy(fields()[2].schema(), other.price);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public java.util.UUID getId() {
            return id;
        }


        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public com.example.kafka.avro.model.OrderItem.Builder setId(java.util.UUID value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public com.example.kafka.avro.model.OrderItem.Builder clearId() {
            id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'quantity' field.
         * @return The value.
         */
        public int getQuantity() {
            return quantity;
        }


        /**
         * Sets the value of the 'quantity' field.
         * @param value The value of 'quantity'.
         * @return This builder.
         */
        public com.example.kafka.avro.model.OrderItem.Builder setQuantity(int value) {
            validate(fields()[1], value);
            this.quantity = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'quantity' field has been set.
         * @return True if the 'quantity' field has been set, false otherwise.
         */
        public boolean hasQuantity() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'quantity' field.
         * @return This builder.
         */
        public com.example.kafka.avro.model.OrderItem.Builder clearQuantity() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'price' field.
         * @return The value.
         */
        public java.nio.ByteBuffer getPrice() {
            return price;
        }


        /**
         * Sets the value of the 'price' field.
         * @param value The value of 'price'.
         * @return This builder.
         */
        public com.example.kafka.avro.model.OrderItem.Builder setPrice(java.nio.ByteBuffer value) {
            validate(fields()[2], value);
            this.price = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'price' field has been set.
         * @return True if the 'price' field has been set, false otherwise.
         */
        public boolean hasPrice() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'price' field.
         * @return This builder.
         */
        public com.example.kafka.avro.model.OrderItem.Builder clearPrice() {
            price = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public OrderItem build() {
            try {
                OrderItem record = new OrderItem();
                record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
                record.quantity = fieldSetFlags()[1] ? this.quantity : (java.lang.Integer) defaultValue(fields()[1]);
                record.price = fieldSetFlags()[2] ? this.price : (java.nio.ByteBuffer) defaultValue(fields()[2]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<OrderItem>
        WRITER$ = (org.apache.avro.io.DatumWriter<OrderItem>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
        throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<OrderItem>
        READER$ = (org.apache.avro.io.DatumReader<OrderItem>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
        throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}










