/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.example.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class NotificationAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2610877256411965825L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NotificationAvroModel\",\"namespace\":\"com.example.kafka.avro.model\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"message\",\"type\":\"string\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<NotificationAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NotificationAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NotificationAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NotificationAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NotificationAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NotificationAvroModel to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NotificationAvroModel from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NotificationAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NotificationAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID userId;
  private java.lang.CharSequence message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NotificationAvroModel() {
  }

  /**
   * All-args constructor.
   *
   * @param userId  The new value for userId
   * @param message The new value for message
   */
  public NotificationAvroModel(java.util.UUID userId, java.lang.CharSequence message) {
    this.userId = userId;
    this.message = message;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return userId;
      case 1:
        return message;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[]{
          new org.apache.avro.Conversions.UUIDConversion(),
          null,
          null
      };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        userId = (java.util.UUID) value$;
        break;
      case 1:
        message = (java.lang.CharSequence) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userId' field.
   *
   * @return The value of the 'userId' field.
   */
  public java.util.UUID getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   *
   * @param value the value to set.
   */
  public void setUserId(java.util.UUID value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'message' field.
   *
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   *
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Creates a new NotificationAvroModel RecordBuilder.
   *
   * @return A new NotificationAvroModel RecordBuilder
   */
  public static com.example.kafka.avro.model.NotificationAvroModel.Builder newBuilder() {
    return new com.example.kafka.avro.model.NotificationAvroModel.Builder();
  }

  /**
   * Creates a new NotificationAvroModel RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new NotificationAvroModel RecordBuilder
   */
  public static com.example.kafka.avro.model.NotificationAvroModel.Builder newBuilder(com.example.kafka.avro.model.NotificationAvroModel.Builder other) {
    if (other == null) {
      return new com.example.kafka.avro.model.NotificationAvroModel.Builder();
    } else {
      return new com.example.kafka.avro.model.NotificationAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new NotificationAvroModel RecordBuilder by copying an existing NotificationAvroModel instance.
   *
   * @param other The existing instance to copy.
   * @return A new NotificationAvroModel RecordBuilder
   */
  public static com.example.kafka.avro.model.NotificationAvroModel.Builder newBuilder(com.example.kafka.avro.model.NotificationAvroModel other) {
    if (other == null) {
      return new com.example.kafka.avro.model.NotificationAvroModel.Builder();
    } else {
      return new com.example.kafka.avro.model.NotificationAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for NotificationAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NotificationAvroModel>
      implements org.apache.avro.data.RecordBuilder<NotificationAvroModel> {

    private java.util.UUID userId;
    private java.lang.CharSequence message;

    /**
     * Creates a new Builder
     */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.kafka.avro.model.NotificationAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing NotificationAvroModel instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(com.example.kafka.avro.model.NotificationAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'userId' field.
     *
     * @return The value.
     */
    public java.util.UUID getUserId() {
      return userId;
    }


    /**
     * Sets the value of the 'userId' field.
     *
     * @param value The value of 'userId'.
     * @return This builder.
     */
    public com.example.kafka.avro.model.NotificationAvroModel.Builder setUserId(java.util.UUID value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'userId' field has been set.
     *
     * @return True if the 'userId' field has been set, false otherwise.
     */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'userId' field.
     *
     * @return This builder.
     */
    public com.example.kafka.avro.model.NotificationAvroModel.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'message' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
     * Sets the value of the 'message' field.
     *
     * @param value The value of 'message'.
     * @return This builder.
     */
    public com.example.kafka.avro.model.NotificationAvroModel.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.message = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'message' field has been set.
     *
     * @return True if the 'message' field has been set, false otherwise.
     */
    public boolean hasMessage() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'message' field.
     *
     * @return This builder.
     */
    public com.example.kafka.avro.model.NotificationAvroModel.Builder clearMessage() {
      message = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NotificationAvroModel build() {
      try {
        NotificationAvroModel record = new NotificationAvroModel();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.util.UUID) defaultValue(fields()[0]);
        record.message = fieldSetFlags()[1] ? this.message : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NotificationAvroModel>
      WRITER$ = (org.apache.avro.io.DatumWriter<NotificationAvroModel>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
      throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NotificationAvroModel>
      READER$ = (org.apache.avro.io.DatumReader<NotificationAvroModel>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
      throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










