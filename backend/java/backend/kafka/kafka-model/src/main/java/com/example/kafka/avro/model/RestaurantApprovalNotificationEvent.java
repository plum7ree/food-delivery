/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.example.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RestaurantApprovalNotificationEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 5694594899881420522L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RestaurantApprovalNotificationEvent\",\"namespace\":\"com.example.kafka.avro.model\",\"fields\":[{\"name\":\"correlationId\",\"type\":\"string\"},{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<RestaurantApprovalNotificationEvent> ENCODER =
        new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<RestaurantApprovalNotificationEvent> DECODER =
        new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<RestaurantApprovalNotificationEvent> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<RestaurantApprovalNotificationEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<RestaurantApprovalNotificationEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this RestaurantApprovalNotificationEvent to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a RestaurantApprovalNotificationEvent from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a RestaurantApprovalNotificationEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static RestaurantApprovalNotificationEvent fromByteBuffer(
        java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.lang.CharSequence correlationId;
    private java.lang.CharSequence userId;
    private java.lang.CharSequence message;
    private java.time.Instant createdAt;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public RestaurantApprovalNotificationEvent() {
    }

    /**
     * All-args constructor.
     * @param correlationId The new value for correlationId
     * @param userId The new value for userId
     * @param message The new value for message
     * @param createdAt The new value for createdAt
     */
    public RestaurantApprovalNotificationEvent(java.lang.CharSequence correlationId, java.lang.CharSequence userId, java.lang.CharSequence message, java.time.Instant createdAt) {
        this.correlationId = correlationId;
        this.userId = userId;
        this.message = message;
        this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return correlationId;
            case 1:
                return userId;
            case 2:
                return message;
            case 3:
                return createdAt;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions =
        new org.apache.avro.Conversion<?>[]{
            null,
            null,
            null,
            new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
            null
        };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                correlationId = (java.lang.CharSequence) value$;
                break;
            case 1:
                userId = (java.lang.CharSequence) value$;
                break;
            case 2:
                message = (java.lang.CharSequence) value$;
                break;
            case 3:
                createdAt = (java.time.Instant) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'correlationId' field.
     * @return The value of the 'correlationId' field.
     */
    public java.lang.CharSequence getCorrelationId() {
        return correlationId;
    }


    /**
     * Sets the value of the 'correlationId' field.
     * @param value the value to set.
     */
    public void setCorrelationId(java.lang.CharSequence value) {
        this.correlationId = value;
    }

    /**
     * Gets the value of the 'userId' field.
     * @return The value of the 'userId' field.
     */
    public java.lang.CharSequence getUserId() {
        return userId;
    }


    /**
     * Sets the value of the 'userId' field.
     * @param value the value to set.
     */
    public void setUserId(java.lang.CharSequence value) {
        this.userId = value;
    }

    /**
     * Gets the value of the 'message' field.
     * @return The value of the 'message' field.
     */
    public java.lang.CharSequence getMessage() {
        return message;
    }


    /**
     * Sets the value of the 'message' field.
     * @param value the value to set.
     */
    public void setMessage(java.lang.CharSequence value) {
        this.message = value;
    }

    /**
     * Gets the value of the 'createdAt' field.
     * @return The value of the 'createdAt' field.
     */
    public java.time.Instant getCreatedAt() {
        return createdAt;
    }


    /**
     * Sets the value of the 'createdAt' field.
     * @param value the value to set.
     */
    public void setCreatedAt(java.time.Instant value) {
        this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Creates a new RestaurantApprovalNotificationEvent RecordBuilder.
     * @return A new RestaurantApprovalNotificationEvent RecordBuilder
     */
    public static com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder newBuilder() {
        return new com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder();
    }

    /**
     * Creates a new RestaurantApprovalNotificationEvent RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new RestaurantApprovalNotificationEvent RecordBuilder
     */
    public static com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder newBuilder(com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder other) {
        if (other == null) {
            return new com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder();
        } else {
            return new com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder(other);
        }
    }

    /**
     * Creates a new RestaurantApprovalNotificationEvent RecordBuilder by copying an existing RestaurantApprovalNotificationEvent instance.
     * @param other The existing instance to copy.
     * @return A new RestaurantApprovalNotificationEvent RecordBuilder
     */
    public static com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder newBuilder(com.example.kafka.avro.model.RestaurantApprovalNotificationEvent other) {
        if (other == null) {
            return new com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder();
        } else {
            return new com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder(other);
        }
    }

    /**
     * RecordBuilder for RestaurantApprovalNotificationEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RestaurantApprovalNotificationEvent>
        implements org.apache.avro.data.RecordBuilder<RestaurantApprovalNotificationEvent> {

        private java.lang.CharSequence correlationId;
        private java.lang.CharSequence userId;
        private java.lang.CharSequence message;
        private java.time.Instant createdAt;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.correlationId)) {
                this.correlationId = data().deepCopy(fields()[0].schema(), other.correlationId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.userId)) {
                this.userId = data().deepCopy(fields()[1].schema(), other.userId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.message)) {
                this.message = data().deepCopy(fields()[2].schema(), other.message);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.createdAt)) {
                this.createdAt = data().deepCopy(fields()[3].schema(), other.createdAt);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
        }

        /**
         * Creates a Builder by copying an existing RestaurantApprovalNotificationEvent instance
         * @param other The existing instance to copy.
         */
        private Builder(com.example.kafka.avro.model.RestaurantApprovalNotificationEvent other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.correlationId)) {
                this.correlationId = data().deepCopy(fields()[0].schema(), other.correlationId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.userId)) {
                this.userId = data().deepCopy(fields()[1].schema(), other.userId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.message)) {
                this.message = data().deepCopy(fields()[2].schema(), other.message);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.createdAt)) {
                this.createdAt = data().deepCopy(fields()[3].schema(), other.createdAt);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'correlationId' field.
         * @return The value.
         */
        public java.lang.CharSequence getCorrelationId() {
            return correlationId;
        }


        /**
         * Sets the value of the 'correlationId' field.
         * @param value The value of 'correlationId'.
         * @return This builder.
         */
        public com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder setCorrelationId(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.correlationId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'correlationId' field has been set.
         * @return True if the 'correlationId' field has been set, false otherwise.
         */
        public boolean hasCorrelationId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'correlationId' field.
         * @return This builder.
         */
        public com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder clearCorrelationId() {
            correlationId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'userId' field.
         * @return The value.
         */
        public java.lang.CharSequence getUserId() {
            return userId;
        }


        /**
         * Sets the value of the 'userId' field.
         * @param value The value of 'userId'.
         * @return This builder.
         */
        public com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder setUserId(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.userId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'userId' field has been set.
         * @return True if the 'userId' field has been set, false otherwise.
         */
        public boolean hasUserId() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'userId' field.
         * @return This builder.
         */
        public com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder clearUserId() {
            userId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'message' field.
         * @return The value.
         */
        public java.lang.CharSequence getMessage() {
            return message;
        }


        /**
         * Sets the value of the 'message' field.
         * @param value The value of 'message'.
         * @return This builder.
         */
        public com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder setMessage(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.message = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'message' field has been set.
         * @return True if the 'message' field has been set, false otherwise.
         */
        public boolean hasMessage() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'message' field.
         * @return This builder.
         */
        public com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder clearMessage() {
            message = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'createdAt' field.
         * @return The value.
         */
        public java.time.Instant getCreatedAt() {
            return createdAt;
        }


        /**
         * Sets the value of the 'createdAt' field.
         * @param value The value of 'createdAt'.
         * @return This builder.
         */
        public com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder setCreatedAt(java.time.Instant value) {
            validate(fields()[3], value);
            this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'createdAt' field has been set.
         * @return True if the 'createdAt' field has been set, false otherwise.
         */
        public boolean hasCreatedAt() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'createdAt' field.
         * @return This builder.
         */
        public com.example.kafka.avro.model.RestaurantApprovalNotificationEvent.Builder clearCreatedAt() {
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public RestaurantApprovalNotificationEvent build() {
            try {
                RestaurantApprovalNotificationEvent record = new RestaurantApprovalNotificationEvent();
                record.correlationId = fieldSetFlags()[0] ? this.correlationId : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.message = fieldSetFlags()[2] ? this.message : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.createdAt = fieldSetFlags()[3] ? this.createdAt : (java.time.Instant) defaultValue(fields()[3]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<RestaurantApprovalNotificationEvent>
        WRITER$ = (org.apache.avro.io.DatumWriter<RestaurantApprovalNotificationEvent>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
        throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<RestaurantApprovalNotificationEvent>
        READER$ = (org.apache.avro.io.DatumReader<RestaurantApprovalNotificationEvent>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
        throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}










