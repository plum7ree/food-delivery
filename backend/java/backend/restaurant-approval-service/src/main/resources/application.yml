server:
  port: 8076


spring:
  application:
    name: restaurant-approval-service
  profiles:
    active: native
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration # We don't need a datasource yet

  jpa:
    hibernate.ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        format_sql: true
  database-platform: org.hibernate.spatial.dialect.postgis.PostgisDialect

  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=restaurant&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: admin
    driver-class-name: org.postgresql.Driver
  sql:
    init:
      platform: postgres
      schema-locations: classpath:restaurant/init-schema.sql
      #      data-locations: classpath:restaurant/init-data.sql
      mode: always
  h2:
    console:
      enabled: true


# for test. These should be moved into configserver
retry-config:
  initial-interval-ms: 1000
  max-interval-ms: 10000
  multiplier: 2.0
  maxAttempts: 3
  sleep-time-ms: 2000

this-service:
  outbox-scheduler-fixed-rate-ms: 1000
  outbox-scheduler-initial-delay-ms: 1000

topic-names:
  payment-request-topic-name: payment-request # TODO remove
  payment-response-topic-name: payment-response # TODO remove
  restaurant-approval-request-topic-name: restaurant-approval-request
  restaurant-approval-response-topic-name: restaurant-approval-response

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  topic-names-to-create:
    - debezium.payment-response
    - debezium.payment-request
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  consumer-group-id: debezium.payment-topic-consumer-group-id
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: false
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150
  enable-auto-commit: true

kafka-consumer-group-id:
  restaurant-approval-request-consumer-group-id: restaurant-approval-request-topic-consumer-group-id



logging:
  level:
    org.springframework.context: DEBUG
    com.example: DEBUG