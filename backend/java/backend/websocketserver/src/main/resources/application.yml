server:
  port: 8094

spring:
  application:
    name: websocketserver
  config:
    import: "optional:configserver:http://localhost:8071/"
  jpa:
    hibernate.ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        # show_sql: true
        default_schema: user_schema
        use_sql_comments: true
        format_sql: true
  database-platform: org.hibernate.spatial.dialect.postgis.PostgisDialect

  datasource:
    # user db
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=user_schema&binaryTransfer=true&reWriteBatchedInserts=true
    username: postgres
    password: admin
    driver-class-name: org.postgresql.Driver
  data:
    redis-server: redis://localhost:6379

  cloud:
    function:
      definition: restaurantApprovalNotificationReceiver
    stream:
      bindings:
        restaurantApprovalNotificationReceiver-in-0:
          destination: restaurant-approval-notification
          group: restaurant-approval-notification-group
      kafka:
        binder:
          brokers: localhost:19092,localhost:29092,localhost:39092
          auto-create-topics: true
          consumer-properties:
            "value.deserializer": io.confluent.kafka.serializers.KafkaAvroDeserializer
            "key.deserializer": org.apache.kafka.common.serialization.StringDeserializer
            "schema.registry.url": http://localhost:8081
            "specific.avro.reader": true
        bindings:
          restaurantApprovalNotificationReceiver-in-0:
            consumer:
              configuration:
                isolation.level: read_committed
                "auto.offset.reset": "earliest" # 최근 n 개의 메시지를 가져오기 위해 사용
                "enable.auto.commit": true

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
      enabled: true
  info:
    env:
      enabled: true
