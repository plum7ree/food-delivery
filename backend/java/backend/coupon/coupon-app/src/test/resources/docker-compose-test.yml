version: '3.7'

services:
  coupon-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    restart: always
  #    hostname: coupon-db
    networks:
      - test-network

  coupon-redis:
    image: redis:latest
    container_name: coupon-redis
    ports:
      - "6379:6379"
    #    hostname: coupon-redis # hostname 을 comment 처리 해도, coupon-app 실행하면 coupon-redis 로 url해야 연결됨.
    command: redis-server --loglevel debug
    networks:
      - test-network

  coupon-app:
    image: lomojiki/uber-msa-coupon-app
    container_name: coupon-app
    ports:
      - "8092:8092"
    networks:
      - test-network
    volumes:
      - ./logs/coupon-app:/app/logs # 로그 파일 볼륨 마운트

  coupon-service:
    image: lomojiki/uber-msa-coupon-service
    container_name: coupon-service
    ports:
      - "8093:8093"
    networks:
      - test-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok"
    networks:
      - test-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-1:9092,LISTENER_LOCAL://localhost:19092
      SCHEMA_REGISTRY_DEBUG: 'true'
    networks:
      - test-network

  # 주의: volume 설정하면 에러날 수 있음. 삭제하고 다시 실행해야하기 때문에 아예 포함 시키지 않음.
  kafka-broker-1:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka-broker-1
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,LISTENER_LOCAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_COMPRESSION_TYPE: producer
    networks:
      - test-network
  kafka-broker-2:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka-broker-2
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9092,LISTENER_LOCAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_COMPRESSION_TYPE: producer
    networks:
      - test-network
  kafka-broker-3:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka-broker-3
    ports:
      - "39092:39092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:9092,LISTENER_LOCAL://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_COMPRESSION_TYPE: producer
    networks:
      - test-network

  tcpdump:
    image: nicolaka/netshoot
    network_mode: "service:kafka-broker-1"
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    command: [ "sh", "-c", "while true; do sleep 1000; done" ]

networks:
  test-network:
    driver: bridge