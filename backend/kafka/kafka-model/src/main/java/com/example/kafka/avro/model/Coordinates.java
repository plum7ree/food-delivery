/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.example.kafka.avro.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Coordinates extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Coordinates\",\"namespace\":\"com.example.kafka.avro.model\",\"fields\":[{\"name\":\"lat\",\"type\":\"float\"},{\"name\":\"lon\",\"type\":\"float\"}]}");
    private static final long serialVersionUID = 1407669671593348168L;
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<Coordinates> ENCODER =
            new BinaryMessageEncoder<Coordinates>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<Coordinates> DECODER =
            new BinaryMessageDecoder<Coordinates>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Coordinates>
            WRITER$ = (org.apache.avro.io.DatumWriter<Coordinates>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Coordinates>
            READER$ = (org.apache.avro.io.DatumReader<Coordinates>) MODEL$.createDatumReader(SCHEMA$);
    private float lat;
    private float lon;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Coordinates() {
    }

    /**
     * All-args constructor.
     * @param lat The new value for lat
     * @param lon The new value for lon
     */
    public Coordinates(java.lang.Float lat, java.lang.Float lon) {
        this.lat = lat;
        this.lon = lon;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Coordinates> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Coordinates> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Coordinates> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Coordinates>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a Coordinates from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Coordinates instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Coordinates fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new Coordinates RecordBuilder.
     * @return A new Coordinates RecordBuilder
     */
    public static com.example.kafka.avro.model.Coordinates.Builder newBuilder() {
        return new com.example.kafka.avro.model.Coordinates.Builder();
    }

    /**
     * Creates a new Coordinates RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Coordinates RecordBuilder
     */
    public static com.example.kafka.avro.model.Coordinates.Builder newBuilder(com.example.kafka.avro.model.Coordinates.Builder other) {
        if (other == null) {
            return new com.example.kafka.avro.model.Coordinates.Builder();
        } else {
            return new com.example.kafka.avro.model.Coordinates.Builder(other);
        }
    }

    /**
     * Creates a new Coordinates RecordBuilder by copying an existing Coordinates instance.
     * @param other The existing instance to copy.
     * @return A new Coordinates RecordBuilder
     */
    public static com.example.kafka.avro.model.Coordinates.Builder newBuilder(com.example.kafka.avro.model.Coordinates other) {
        if (other == null) {
            return new com.example.kafka.avro.model.Coordinates.Builder();
        } else {
            return new com.example.kafka.avro.model.Coordinates.Builder(other);
        }
    }

    /**
     * Serializes this Coordinates to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return lat;
            case 1:
                return lon;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                lat = (java.lang.Float) value$;
                break;
            case 1:
                lon = (java.lang.Float) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'lat' field.
     * @return The value of the 'lat' field.
     */
    public float getLat() {
        return lat;
    }

    /**
     * Sets the value of the 'lat' field.
     * @param value the value to set.
     */
    public void setLat(float value) {
        this.lat = value;
    }

    /**
     * Gets the value of the 'lon' field.
     * @return The value of the 'lon' field.
     */
    public float getLon() {
        return lon;
    }

    /**
     * Sets the value of the 'lon' field.
     * @param value the value to set.
     */
    public void setLon(float value) {
        this.lon = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeFloat(this.lat);

        out.writeFloat(this.lon);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.lat = in.readFloat();

            this.lon = in.readFloat();

        } else {
            for (int i = 0; i < 2; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.lat = in.readFloat();
                        break;

                    case 1:
                        this.lon = in.readFloat();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for Coordinates instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Coordinates>
            implements org.apache.avro.data.RecordBuilder<Coordinates> {

        private float lat;
        private float lon;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.example.kafka.avro.model.Coordinates.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.lat)) {
                this.lat = data().deepCopy(fields()[0].schema(), other.lat);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.lon)) {
                this.lon = data().deepCopy(fields()[1].schema(), other.lon);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
        }

        /**
         * Creates a Builder by copying an existing Coordinates instance
         * @param other The existing instance to copy.
         */
        private Builder(com.example.kafka.avro.model.Coordinates other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.lat)) {
                this.lat = data().deepCopy(fields()[0].schema(), other.lat);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.lon)) {
                this.lon = data().deepCopy(fields()[1].schema(), other.lon);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'lat' field.
         * @return The value.
         */
        public float getLat() {
            return lat;
        }


        /**
         * Sets the value of the 'lat' field.
         * @param value The value of 'lat'.
         * @return This builder.
         */
        public com.example.kafka.avro.model.Coordinates.Builder setLat(float value) {
            validate(fields()[0], value);
            this.lat = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'lat' field has been set.
         * @return True if the 'lat' field has been set, false otherwise.
         */
        public boolean hasLat() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'lat' field.
         * @return This builder.
         */
        public com.example.kafka.avro.model.Coordinates.Builder clearLat() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'lon' field.
         * @return The value.
         */
        public float getLon() {
            return lon;
        }


        /**
         * Sets the value of the 'lon' field.
         * @param value The value of 'lon'.
         * @return This builder.
         */
        public com.example.kafka.avro.model.Coordinates.Builder setLon(float value) {
            validate(fields()[1], value);
            this.lon = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'lon' field has been set.
         * @return True if the 'lon' field has been set, false otherwise.
         */
        public boolean hasLon() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'lon' field.
         * @return This builder.
         */
        public com.example.kafka.avro.model.Coordinates.Builder clearLon() {
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Coordinates build() {
            try {
                Coordinates record = new Coordinates();
                record.lat = fieldSetFlags()[0] ? this.lat : (java.lang.Float) defaultValue(fields()[0]);
                record.lon = fieldSetFlags()[1] ? this.lon : (java.lang.Float) defaultValue(fields()[1]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










